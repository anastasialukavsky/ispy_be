scalar UUID
scalar DateTime
scalar OffsetDateTime
scalar JSON

type User {
    userId: UUID!
    email: String
    passwordHash: String
    oAuthProvider: String
    oAuthId: String
    role: UserRole
    createdAt: OffsetDateTime
    updatedAt: OffsetDateTime
}

enum UserRole {
    ADMIN
    USER
}

input AuthSignUpInput {
    email: String
    passwordHash: String
    oAuthProvider: String
    oAuthId: String
    role: UserRole = USER
}

input AuthSignInInput {
    email: String
    passwordHash: String
    oAuthProvider: String
    oAuthId: String
}

input ImageInput {
    userId: UUID!
    filePath: String!
}

type AuthSignUpPayload {
    user: User
    accessToken: String
}

type Image {
    imageId: ID!
    userId: UUID!
    filePath: String!
    uploadedAt: DateTime!
}

type ElaResults {
    id: ID!
    imageId: ID!
    tamperingLikelihood: Float
    detectedEla: Boolean
}

input ElaInput {
    imageId: ID!
    tamperingLikelihood: Float
    detectedEla: Boolean
}

type NoiseAnalysisResults {
    id: ID!
    imageId: ID!
    tamperingLikelihood: Float
    detectedNoise: Boolean
}

input NoiseAnalysisInput {
    imageId: ID!
    tamperingLikelihood: Float!
    detectedNoise: Boolean!
}

type Metadata {
    metadataId: ID!
    imageId: ID!
    metadata: JSON
}
input MetadataInput {
    imageId: ID!
    metadata: JSON
}

type HistoricalWeather {
    id: ID!
    imageId: ID!
    historicalWeather: String
}

input HistoricalWeatherInput {
    imageId: ID!
    historicalWeather: String
}

type DeepLearningWeather {
    id: ID!
    imageId: ID!
    deepLearningWeather: String
}

input DeepLearningWeatherInput {
    imageId: ID!
    deepLearningWeather: String
}

type Geolocation {
    id: ID
    imageId: ID
    latitude: Float
    longitude: Float
}

input GeolocationInput {
    imageId: ID
    latitude: Float
    longitude: Float
}

type ImageWithResults {
    image: Image
    elaResults: [ElaResults]
    noiseAnalysisResults: [NoiseAnalysisResults]
    metadata: [Metadata]
    historicalWeather: [HistoricalWeather]
    deepLearningWeather: [DeepLearningWeather]
    geolocation: [Geolocation]
}

type Mutation {
    signUp(input: AuthSignUpInput!): AuthSignUpPayload
    signIn(input: AuthSignInInput!): AuthSignUpPayload
    saveImage(input: ImageInput!): Image!
    saveMetadata(input: MetadataInput!): Metadata!
    saveNoiseAnalysis(input: NoiseAnalysisInput!): NoiseAnalysisResults
    saveEla(input: ElaInput): ElaResults
    saveHistoricalWeather(input: HistoricalWeatherInput): HistoricalWeather
    saveDeepLearningWeather(input: DeepLearningWeatherInput): DeepLearningWeather
    saveGeolocation(input: GeolocationInput): Geolocation
}

type Query {
    greeting: String
    getUserImagesWithResults(userId: UUID!): [ImageWithResults]
}