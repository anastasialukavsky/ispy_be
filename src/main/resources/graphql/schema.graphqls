scalar UUID
scalar DateTime
scalar OffsetDateTime

type User {
    userId: UUID!
    email: String
    passwordHash: String
    oAuthProvider: String
    oAuthId: String
    role: UserRole
    createdAt: OffsetDateTime
    updatedAt: OffsetDateTime
}

enum UserRole {
    ADMIN
    USER
}

input AuthSignUpInput {
    email: String
    passwordHash: String
    oAuthProvider: String
    oAuthId: String
    role: UserRole = USER
}

input AuthSignInInput {
    email: String
    passwordHash: String
    oAuthProvider: String
    oAuthId: String
}

type AuthSignUpPayload {
    user: User
    accessToken: String
}

type Image {
    imageId: ID!
    userId: UUID!
    filePath: String!
    uploadedAt: DateTime!
}

type ElaResults {
    id: ID!
    imageId: ID!
    tamperingLikelihood: Float
    detectedEla: Boolean
    processedAt: DateTime
}

type NoiseAnalysisResults {
    id: ID!
    imageId: ID!
    tamperingLikelihood: Float
    detectedNoise: Boolean
    processedAt: String!
}



type Mutation {
    signUp(input: AuthSignUpInput!): AuthSignUpPayload
    signIn(input: AuthSignInInput!): AuthSignUpPayload
}

type Query {
    greeting: String
}