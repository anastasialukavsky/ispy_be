/*
 * This file is generated by jOOQ.
 */
package com.ispy.ispy.jooq.com.ispy.spy.jooq.tables


import com.ispy.ispy.jooq.com.ispy.spy.jooq.Public
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.DEEP_LEARNING_WEATHER_ANALIZER__DEEP_LEARNING_WEATHER_ANALIZER_IMAGE_ID_FKEY
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.ELA_RESULTS__FK_IMAGE
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.GEOLOCATION__GEOLOCATION_IMAGE_ID_FKEY
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.HISTORICAL_WEATHER__HISTORICAL_WEATHER_IMAGE_ID_FKEY
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.IMAGES_PKEY
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.IMAGES__FK_USER
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.METADATA__METADATA_IMAGE_ID_FKEY
import com.ispy.ispy.jooq.com.ispy.spy.jooq.keys.NOISE_ANALYSIS_RESULTS__FK_IMAGE
import com.ispy.spy.jooq.tables.DeepLearningWeatherAnalizer.DeepLearningWeatherAnalizerPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.ElaResults.ElaResultsPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.Geolocation.GeolocationPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.HistoricalWeather.HistoricalWeatherPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.Metadata.MetadataPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.NoiseAnalysisResults.NoiseAnalysisResultsPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.Users.UsersPath
import com.ispy.ispy.jooq.com.ispy.spy.jooq.tables.records.ImagesRecord

import java.time.LocalDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Images(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ImagesRecord>?,
    parentPath: InverseForeignKey<out Record, ImagesRecord>?,
    aliased: Table<ImagesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ImagesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.images</code>
         */
        val IMAGES: Images = Images()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ImagesRecord> = ImagesRecord::class.java

    /**
     * The column <code>public.images.image_id</code>.
     */
    val IMAGE_ID: TableField<ImagesRecord, Int?> = createField(DSL.name("image_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.images.user_id</code>.
     */
    val USER_ID: TableField<ImagesRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.images.file_path</code>.
     */
    val FILE_PATH: TableField<ImagesRecord, String?> = createField(DSL.name("file_path"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.images.uploaded_at</code>.
     */
    val UPLOADED_AT: TableField<ImagesRecord, LocalDateTime?> = createField(DSL.name("uploaded_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<ImagesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ImagesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ImagesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.images</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.images</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.images</code> table reference
     */
    constructor(): this(DSL.name("images"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ImagesRecord>?, parentPath: InverseForeignKey<out Record, ImagesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, IMAGES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ImagesPath : Images, Path<ImagesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ImagesRecord>?, parentPath: InverseForeignKey<out Record, ImagesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ImagesRecord>): super(alias, aliased)
        override fun `as`(alias: String): ImagesPath = ImagesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ImagesPath = ImagesPath(alias, this)
        override fun `as`(alias: Table<*>): ImagesPath = ImagesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ImagesRecord, Int?> = super.getIdentity() as Identity<ImagesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<ImagesRecord> = IMAGES_PKEY
    override fun getReferences(): List<ForeignKey<ImagesRecord, *>> = listOf(IMAGES__FK_USER)

    private lateinit var _users: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath {
        if (!this::_users.isInitialized)
            _users = UsersPath(this, IMAGES__FK_USER, null)

        return _users;
    }

    val users: UsersPath
        get(): UsersPath = users()

    private lateinit var _deepLearningWeatherAnalizer: DeepLearningWeatherAnalizerPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.deep_learning_weather_analizer</code> table
     */
    fun deepLearningWeatherAnalizer(): DeepLearningWeatherAnalizerPath {
        if (!this::_deepLearningWeatherAnalizer.isInitialized)
            _deepLearningWeatherAnalizer = DeepLearningWeatherAnalizerPath(this, null, DEEP_LEARNING_WEATHER_ANALIZER__DEEP_LEARNING_WEATHER_ANALIZER_IMAGE_ID_FKEY.inverseKey)

        return _deepLearningWeatherAnalizer;
    }

    val deepLearningWeatherAnalizer: DeepLearningWeatherAnalizerPath
        get(): DeepLearningWeatherAnalizerPath = deepLearningWeatherAnalizer()

    private lateinit var _elaResults: ElaResultsPath

    /**
     * Get the implicit to-many join path to the <code>public.ela_results</code>
     * table
     */
    fun elaResults(): ElaResultsPath {
        if (!this::_elaResults.isInitialized)
            _elaResults = ElaResultsPath(this, null, ELA_RESULTS__FK_IMAGE.inverseKey)

        return _elaResults;
    }

    val elaResults: ElaResultsPath
        get(): ElaResultsPath = elaResults()

    private lateinit var _noiseAnalysisResults: NoiseAnalysisResultsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.noise_analysis_results</code> table
     */
    fun noiseAnalysisResults(): NoiseAnalysisResultsPath {
        if (!this::_noiseAnalysisResults.isInitialized)
            _noiseAnalysisResults = NoiseAnalysisResultsPath(this, null, NOISE_ANALYSIS_RESULTS__FK_IMAGE.inverseKey)

        return _noiseAnalysisResults;
    }

    val noiseAnalysisResults: NoiseAnalysisResultsPath
        get(): NoiseAnalysisResultsPath = noiseAnalysisResults()

    private lateinit var _geolocation: GeolocationPath

    /**
     * Get the implicit to-many join path to the <code>public.geolocation</code>
     * table
     */
    fun geolocation(): GeolocationPath {
        if (!this::_geolocation.isInitialized)
            _geolocation = GeolocationPath(this, null, GEOLOCATION__GEOLOCATION_IMAGE_ID_FKEY.inverseKey)

        return _geolocation;
    }

    val geolocation: GeolocationPath
        get(): GeolocationPath = geolocation()

    private lateinit var _historicalWeather: HistoricalWeatherPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.historical_weather</code> table
     */
    fun historicalWeather(): HistoricalWeatherPath {
        if (!this::_historicalWeather.isInitialized)
            _historicalWeather = HistoricalWeatherPath(this, null, HISTORICAL_WEATHER__HISTORICAL_WEATHER_IMAGE_ID_FKEY.inverseKey)

        return _historicalWeather;
    }

    val historicalWeather: HistoricalWeatherPath
        get(): HistoricalWeatherPath = historicalWeather()

    private lateinit var _metadata: MetadataPath

    /**
     * Get the implicit to-many join path to the <code>public.metadata</code>
     * table
     */
    fun metadata(): MetadataPath {
        if (!this::_metadata.isInitialized)
            _metadata = MetadataPath(this, null, METADATA__METADATA_IMAGE_ID_FKEY.inverseKey)

        return _metadata;
    }

    val metadata: MetadataPath
        get(): MetadataPath = metadata()
    override fun `as`(alias: String): Images = Images(DSL.name(alias), this)
    override fun `as`(alias: Name): Images = Images(alias, this)
    override fun `as`(alias: Table<*>): Images = Images(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Images = Images(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Images = Images(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Images = Images(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Images = Images(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Images = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Images = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Images = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Images = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Images = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Images = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Images = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Images = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Images = where(DSL.notExists(select))
}
